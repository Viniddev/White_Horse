// <auto-generated />
using System;
using App.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("CreatorId");

                    b.Property<long>("Deslikes")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<long>("Likes")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(280)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Responses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<long>("Deslikes")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<long>("Likes")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("App.Domain.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("Number")
                        .HasColumnType("INT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME2");

                    b.HasKey("Id");

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.UserInformations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("UserAddressId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<byte>("UserRole")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("UserAddressId");

                    b.ToTable("UserInformations", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Posts", b =>
                {
                    b.HasOne("App.Domain.Entities.UserInformations", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Responses", b =>
                {
                    b.HasOne("App.Domain.Entities.UserInformations", "User")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Posts", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.UserInformations", b =>
                {
                    b.HasOne("App.Domain.Entities.UserAddress", "UserAddress")
                        .WithMany()
                        .HasForeignKey("UserAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
